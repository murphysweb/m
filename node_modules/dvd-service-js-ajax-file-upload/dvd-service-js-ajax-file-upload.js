/**
 * @see https://help.aliyun.com/document_detail/64041.html?spm=a2c4g.11186623.3.3.i6fD85
 */
import $ from 'jquery';
import uuid from 'uuid/v1';
import popup from 'dvd-service-js-popup';
import encrypt from 'dvd-service-js-encrypt';
import date from 'dvd-base-js-date';
import type from 'dvd-base-js-type';
import Img from 'dvd-base-js-img';
import oss from './oss.js';
import 'babel-polyfill';

/**
 * @module dvd-service-js-ajax-file-upload
 * @author swg [源码地址](http://gitlab.rd.vyohui.com/FE-Service/dvd-service-js-ajax-file-upload.git)
 * @example
 * http://gitlab.rd.vyohui.com/FE-Service/npm-test.git
 * http://bravetime.davdian.com/npm-test/dvd-base-com-img-clip.html
 */
export default {
  /**
   * 功能: 上传
   * @example
   ajaxFileUpload.upload({
      url: '/upload.php',   // 全站默认url,可不传
      owner_id: '2927099'
      fileFieldName: 'shop_logo',    // 文件字段,可不传
      accept: 'image/*',    // 默认图片,可不传
      success: function (response) {

      },
      error: function (error) {
        console.error('ajax error:' + error.status + ' ' + error.statusText);
      }
    });
   * @deprecated 推荐使用uploadImgFile方法
   */
  upload(param = {}){
    // 创建表单
    let form = document.createElement('form');

    // 创建输入框
    let input = document.createElement('input');
    input.type = 'file';
    input.name = param.fileFieldName || 'shop_logo';
    input.accept = param.accept || 'image/*' || '*';
    input.style.display = 'none';
    input.addEventListener('change', function (event) {
      // 全站默认上传接口/upload.php
      let url = `${param.url || '/upload.php'}?owner_id=${param.owner_id}_=${Date.now()}`;
      popup.loading();
      $.ajax({
        cache: false,
        async: true,
        url: url,
        type: 'post',
        dataType: 'json',
        data: new FormData(form),
        contentType: false,
        processData: false,
        success: function (response) {
          popup.loading(false);
          param.success && param.success(response);
          form && form.parentNode && form.parentNode.removeChild(form);
        },
        error: function (error) {
          popup.loading(false);
          param.error && param.error(error);
          form && form.parentNode && form.parentNode.removeChild(form);
        }
      });
    }, false);

    // 插入dom
    form.appendChild(input);
    document.body.appendChild(form);

    // 10s后清除上传dom
    setTimeout(function () {
      form && form.parentNode && document.body.removeChild(form);
    }, 1000 * 10);

    // 触发文件选择框
    input.click();
  },

  /**
   * @method chooseLocalFile
   * @desc 选择本地文件，返回File数组
   * @param {{}} {
      accept: '*',  // 可选择文件类型（MIME格式）
      maxSize: 10,   // 图片最大尺寸（单位MB）
    }
   * @returns {Array(File)}
   * @example
   ajaxFileUpload.chooseLocalFile({
      accept: '*',
      maxSize: 10,
    }).then((data) => {
    },(err) => {
      console.error(err);
    });
   */
  async chooseLocalFile(param = {}) {
    // 填充默认参数
    param = Object.assign({
      accept: '*',
      maxSize: 10,
    }, param);

    return await new Promise((resolve, reject) => {
      // 文件选择器
      let input = document.createElement('input');

      // 设置文件选择器
      input.type = 'file';
      input.multiple = 'multiple';
      input.accept = param.accept;

      // 处理兼容性问题，目前已知的android5.x不能使用标准逗号分隔格式
      input.accept = input.accept.replace(/,/g, ' ');

      // 在ios中必须将input元素插入dom，才能触发change事件
      input.style.display = 'none';
      document.body.appendChild(input);

      // 选择完时回调success方法，并回传选择结果
      function processFiles(files) {
        // 合格的文件
        let okFileArr = [];

        // 超出体积限制的文件
        let exceedFileArr = [];

        // 检查文件体积
        for (let i = 0; i < files.length; i++) {
          let file = files[i];
          let fileSize = file.size / 1024 / 1024;
          // 合格的文件
          if (fileSize <= param.maxSize) {
            okFileArr.push(file);
            // 超出体积限制的文件
          } else {
            exceedFileArr.push(file);
          }
        }

        // 选择结束
        if (exceedFileArr.length === 0) {
          resolve(okFileArr);
        } else {
          let exceedStr = exceedFileArr.map((file) => {
            return `${file.name}(${Math.ceil(file.size / 1024 / 1024)}MB)`;
          });
          reject(`文件最大限制为${param.maxSize}MB，您选择的文件"${exceedStr}"已超出限制，请您重新选择。`);
        }
      }

      // 清除事件和元素
      function destroy() {
        input.removeEventListener('change', changeCb, false);
        document.body.removeChild(input);
      }

      // 选择完成回调
      function changeCb(event) {
        processFiles(event.target.files);
        destroy();
      }

      input.addEventListener('change', changeCb, false);

      // 触发文件选择框
      input.click();
    });
  },

  /**
   * @method chooseLocalImgFile
   * @desc 选择本地图片文件，返回base64格式图片URL
   * @param {{}} {
      accept: 'image/png,image/jpeg,image/jpg,image/gif',  // 可选择文件类型（MIME格式）
      maxSize: 10,   // 图片最大尺寸（单位MB）
      returnType: 'File',   // 返回类型，{'File'|'base64'}
    }
   * @returns {Array(base64)}
   */
  async chooseLocalImgFile(param = {}) {
    // 填充默认参数
    param = Object.assign({
      accept: 'image/*',
      returnType: 'File',
    }, param);

    // 选文件
    let files = await this.chooseLocalFile(param);

    // 按需返回文件类型
    if (param.returnType == 'File') {
      return files;
    } else if (param.returnType == 'base64') {
      // 批量转base64
      return await Promise.all(files.map((file) => {
        return new Promise((resolve, reject) => {
          let img = new Img(file);
          img.init().then(() => {
            resolve(img.toBase64());
          }, reject);
        });
      }));
    }
  },

  /**
   * @method uploadFile
   * @desc 上传文件，可以与chooseLocalFile联合使用
   * @example
   ajaxFileUpload.uploadFile({
      dir: '',    // 上传目标文件夹名称。建议每个功能页面的上传功能是一个独立的文件夹，方便日后统一处理。例如微信头像可以起名为'wx-head'，请到oss手动检查dir是否与已知目录重名
      files: [],  // 上传的文件（File数组）
      loading: 1, // 是否自动显示loading（默认开启，如需关闭请传0）
    }).then((data) => {
      alert(JSON.stringify(data));
    }, (err) => {
      console.error(err);
    });
   */
  async uploadFile(param = {}) {
    // 填充默认参数
    param = Object.assign({
      dir: '',
      files: [],
      loading: 1,
    }, param);

    // 参数检查
    if (!param.dir) {
      throw new Error('dir为必传项');
    }

    // 返回上传后的文件url数组
    return await Promise.all(param.files.map((file) => {
      return oss.upload(param.dir, file)
    }));
  },

  /**
   * @method uploadImg
   * @desc 上传图片文件，可以与chooseLocalFile(返回File数组，效率高)和chooseLocalImgFile(返回base64数组，可预览，效率略低)联合使用
   * @example
   ajaxFileUpload.uploadImg({
      dir: '',    // 上传目标文件夹名称。建议每个功能页面的上传功能是一个独立的文件夹，方便日后统一处理。例如微信头像可以起名为'wx-head'，请到oss手动检查dir是否与已知目录重名
      imgs: [],  // 上传的图片（数组可接受File、url、base64url）
      loading: 1, // 是否自动显示loading（默认开启，如需关闭请传0）
      maxSize: 1,   // 图片最大尺寸（单位MB，如果传2MB图片文件时，会自动降质0.5转成1MB的文件并上传）
    }).then((data) => {
      alert(JSON.stringify(data));
    }, (err) => {
      console.error(err);
    });
   */
  async uploadImg(param = {}) {
    let ts = this;

    // 填充默认参数
    param = Object.assign({
      maxSize: 1,
    }, param);

    // 图片转文件队列
    let files = await Promise.all(param.imgs.map((img) => {
      return new Promise((resolve, reject) => {
        img = new Img(img);
        img.init().then(() => {
          img.toFile().then(resolve, reject);
        }, reject);
      });
    }));

    // 压缩队列，如果图片体积过大，压缩到最大可接受值
    param.files = await Img.multiAutoCompress(files, param.maxSize);

    // 返回上传后的图片url数组
    return await this.uploadFile(param);
  },
}
