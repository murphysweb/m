'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BarrettMu_powMod = exports.BarrettMu_multiplyMod = exports.BarrettMu_modulo = exports.BarrettMu = undefined;

var _BigInt = require('./BigInt');

// BarrettMu, a class for performing Barrett modular reduction computations in
// JavaScript.
//
// Requires BigInt.js.
//
// Copyright 2004-2005 David Shapiro.
//
// You may use, re-use, abuse, copy, and modify this code to your liking, but
// please keep this header.
//
// Thanks!
// 
// Dave Shapiro
// dave@ohdave.com

function BarrettMu(m) {
  this.modulus = (0, _BigInt.biCopy)(m);
  this.k = (0, _BigInt.biHighIndex)(this.modulus) + 1;
  var b2k = new _BigInt.BigInt();
  b2k.digits[2 * this.k] = 1; // b2k = b^(2k)
  this.mu = biDivide(b2k, this.modulus);
  this.bkplus1 = new _BigInt.BigInt();
  this.bkplus1.digits[this.k + 1] = 1; // bkplus1 = b^(k+1)
  this.modulo = BarrettMu_modulo;
  this.multiplyMod = BarrettMu_multiplyMod;
  this.powMod = BarrettMu_powMod;
}

function BarrettMu_modulo(x) {
  var q1 = (0, _BigInt.biDivideByRadixPower)(x, this.k - 1);
  var q2 = (0, _BigInt.biMultiply)(q1, this.mu);
  var q3 = (0, _BigInt.biDivideByRadixPower)(q2, this.k + 1);
  var r1 = (0, _BigInt.biModuloByRadixPower)(x, this.k + 1);
  var r2term = (0, _BigInt.biMultiply)(q3, this.modulus);
  var r2 = (0, _BigInt.biModuloByRadixPower)(r2term, this.k + 1);
  var r = (0, _BigInt.biSubtract)(r1, r2);
  if (r.isNeg) {
    r = (0, _BigInt.biAdd)(r, this.bkplus1);
  }
  var rgtem = (0, _BigInt.biCompare)(r, this.modulus) >= 0;
  while (rgtem) {
    r = (0, _BigInt.biSubtract)(r, this.modulus);
    rgtem = (0, _BigInt.biCompare)(r, this.modulus) >= 0;
  }
  return r;
}

function BarrettMu_multiplyMod(x, y) {
  /*
   x = this.modulo(x);
   y = this.modulo(y);
   */
  var xy = (0, _BigInt.biMultiply)(x, y);
  return this.modulo(xy);
}

function BarrettMu_powMod(x, y) {
  var result = new _BigInt.BigInt();
  result.digits[0] = 1;
  var a = x;
  var k = y;
  while (true) {
    if ((k.digits[0] & 1) != 0) result = this.multiplyMod(result, a);
    k = (0, _BigInt.biShiftRight)(k, 1);
    if (k.digits[0] == 0 && (0, _BigInt.biHighIndex)(k) == 0) break;
    a = this.multiplyMod(a, a);
  }
  return result;
}

exports.BarrettMu = BarrettMu;
exports.BarrettMu_modulo = BarrettMu_modulo;
exports.BarrettMu_multiplyMod = BarrettMu_multiplyMod;
exports.BarrettMu_powMod = BarrettMu_powMod;