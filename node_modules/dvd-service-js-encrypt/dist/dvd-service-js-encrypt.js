'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dvdBaseJsUa = require('dvd-base-js-ua');

var _dvdBaseJsUa2 = _interopRequireDefault(_dvdBaseJsUa);

var _jsCookie = require('js-cookie');

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _md = require('crypto-js/md5.js');

var _md2 = _interopRequireDefault(_md);

var _dvdBaseJsParam = require('dvd-base-js-param');

var _dvdBaseJsParam2 = _interopRequireDefault(_dvdBaseJsParam);

var _dvdBaseJsRuntime = require('dvd-base-js-runtime');

var _dvdBaseJsRuntime2 = _interopRequireDefault(_dvdBaseJsRuntime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
// import login from 'dvd-service-js-login';


function getDvdsid() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      req = _ref.req;

  var dvdsid = req ? req.cookies.dvdsid : _jsCookie2.default.get('dvdsid');
  return Object.prototype.toString.call(dvdsid) === '[object String]' ? dvdsid : '';
}

/**
 * @module dvd-service-js-encrypt
 * @author swg [源码地址](http://gitlab.rd.vyohui.com/FE-Service/dvd-service-js-encrypt.git)
 */
exports.default = {
  /**
   * ajax数据完整性加密
   * @param obj {Object} 将要被加密的参数
   * @param publicOptions {Object} 公参
   * @returns {string}
   */
  ajax: function ajax() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        req = _ref2.req,
        res = _ref2.res;

    // 公共参数
    var data = _defineProperty({
      data_version: '0',
      device_token: '',
      format: 'json',
      osv: function () {
        if (_dvdBaseJsUa2.default.isDvdApp()) {
          if (_dvdBaseJsUa2.default.isAndroid()) {
            return 'web_android_' + _dvdBaseJsUa2.default.getDvdAppVersion() + '_*';
          } else if (_dvdBaseJsUa2.default.isIos()) {
            return 'web_ios_' + _dvdBaseJsUa2.default.getDvdAppVersion() + '_*';
          }
        }
        return 'web_h5_*_*';
      }(),
      // ssr时才会使用默认值
      shop_url: _dvdBaseJsRuntime2.default.isServer() ? req.protocol + '://' + req.headers.host.split(':')[0] : location.protocol + '//' + location.host,
      // sess_key: login.getDvdsid(),
      sess_key: getDvdsid(),
      ts: Date.now(),
      wh: '750_1334'
    }, 'device_token', _dvdBaseJsUa2.default.getDvdAppDeviceId());

    if (_dvdBaseJsRuntime2.default.isClient()) {
      // 统计参数
      var tjKeys = ['rp', 'rl', 'logDp', 'dp', 'cq', 'cu'];
      var url = /* 如果有VueRouter则用hask提取url */window.VueRouter ? location.hash : location.href;
      for (var i in tjKeys) {
        var tjKey = tjKeys[i];
        var tjVal = _dvdBaseJsParam2.default.get(tjKey, url);
        if (tjVal) {
          data[tjKey] = tjVal;
          // param[tjKey] = tjVal.replace(/[ +]/g, '');
        }
      }
    }

    // 业务参数
    for (var _i in obj) {
      data[_i] = obj[_i];
    }

    // map转map数组，编码
    var signArr = [];
    var dataStrArr = [];
    Object.keys(data).sort().forEach(function (key, i) {
      signArr.push(key + '=' + data[key]);
      dataStrArr.push('' + (i === 0 ? '' : '&') + key + '=' + encodeURIComponent(data[key]));
    });

    // md5校验值
    var sign = (0, _md2.default)(signArr.join('')).toString().toUpperCase();

    return dataStrArr.join('') + '&sign=' + sign;
  }
};